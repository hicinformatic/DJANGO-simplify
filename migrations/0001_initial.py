# Generated by Django 2.0.1 on 2018-01-09 19:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simplify.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=254, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_robot', models.BooleanField(default=False, verbose_name='Robot')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Firstname')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Lastname')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date joined')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('update_by', models.CharField(editable=False, max_length=254, verbose_name='Update by')),
                ('method', models.CharField(choices=[('CREATESUPERUSER', 'Create Super User'), ('BACKEND', 'Back-end'), ('FRONTEND', 'Front-end'), ('ADDITIONAL', 'Additional method')], default='BACKEND', max_length=15, verbose_name='Create method')),
                ('key', models.CharField(default='c-A_cCcae~c-5dEa..9~_77.C0.d+C0E', max_length=32, unique=True, validators=[django.core.validators.MaxLengthValidator(32), django.core.validators.MinLengthValidator(10)], verbose_name='Authentication key')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
                'permissions': (('can_use_api', 'Can use API'),),
            },
            managers=[
                ('objects', simplify.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('update_by', models.CharField(blank=True, editable=False, help_text='Last user who modified.', max_length=254, null=True, verbose_name='Update by')),
                ('error', models.TextField(blank=True, help_text='Detail about the error.', null=True, verbose_name='Error encountered')),
            ],
            options={
                'abstract': False,
            },
            bases=('auth.group', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('update_by', models.CharField(blank=True, editable=False, help_text='Last user who modified.', max_length=254, null=True, verbose_name='Update by')),
                ('error', models.TextField(blank=True, help_text='Detail about the error.', null=True, verbose_name='Error encountered')),
                ('method', models.CharField(help_text='Method type', max_length=4, verbose_name='Create method')),
                ('name', models.CharField(help_text='Method name', max_length=254, verbose_name='Name')),
                ('enable', models.BooleanField(default=True, help_text='Enable or disable the method', verbose_name='Enable')),
                ('port', models.PositiveIntegerField(blank=True, default=0, help_text='Change the port used by the method', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('tls', models.BooleanField(default=False, help_text='Enable or disable TLS', verbose_name='Enable TLS')),
                ('certificate', models.TextField(blank=True, help_text='Uploaded here the certificate to check', null=True, verbose_name='TLS Certificate')),
                ('self_signed', models.BooleanField(default=False, help_text='Is the certificate self-signed?', verbose_name='Self-signed')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Will be superuser')),
                ('field_firstname', models.CharField(blank=True, help_text='Automatically filled field with key map (Keep null if not used)', max_length=254, null=True, verbose_name='Firstname correspondence')),
                ('field_lastname', models.CharField(blank=True, help_text='Automatically filled field with key map (Keep null if not used)', max_length=254, null=True, verbose_name='Lastname correspondence')),
                ('field_email', models.CharField(blank=True, help_text='Automatically filled field with key map (Keep null if not used)', max_length=254, null=True, verbose_name='Email correspondence')),
                ('groups', models.ManyToManyField(blank=True, to='simplify.Group', verbose_name='Groups associated')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.Permission', verbose_name='Permissions associated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('update_by', models.CharField(blank=True, editable=False, help_text='Last user who modified.', max_length=254, null=True, verbose_name='Update by')),
                ('error', models.TextField(blank=True, help_text='Detail about the error.', null=True, verbose_name='Error encountered')),
                ('name', models.CharField(help_text='Script name', max_length=254, verbose_name='Script name')),
                ('code', models.TextField(help_text='Python code', verbose_name='Python code')),
            ],
            options={
                'verbose_name': 'Script',
                'verbose_name_plural': 'Scripts',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Last modification date')),
                ('update_by', models.CharField(blank=True, editable=False, help_text='Last user who modified.', max_length=254, null=True, verbose_name='Update by')),
                ('error', models.TextField(blank=True, help_text='Detail about the error.', null=True, verbose_name='Error encountered')),
                ('info', models.TextField(blank=True, help_text='Information about the task.', null=True, verbose_name='More informations')),
                ('status', models.CharField(choices=[('error', 'In error'), ('order', 'Ordered'), ('ready', 'Ready'), ('start', 'Started'), ('running', 'Running'), ('complete', 'Complete')], default='order', help_text='Task status.', max_length=8, verbose_name='Status')),
                ('command', models.CharField(blank=True, editable=False, help_text='Command used to run the script.', max_length=254, null=True, verbose_name='Command')),
                ('local_check', models.CharField(blank=True, editable=False, help_text='Local check for not duplicate the task.', max_length=254, null=True, verbose_name='Local check')),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simplify.Script')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='additional',
            field=models.ManyToManyField(blank=True, to='simplify.Method'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
